from telebot import types, TeleBot
from telebot.types import ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
import sys
import os
from telebot.types import InputMediaPhoto
from tgbot import config


force_reply = types.ForceReply(input_field_placeholder="Enter value")

expired_reply = InlineKeyboardMarkup([[InlineKeyboardButton(text="Invoice Expired", callback_data="expired")]])
created_reply = InlineKeyboardMarkup([[InlineKeyboardButton(text="Invoice Created", callback_data="created")]])

def editted_reply(text):
    return InlineKeyboardMarkup(
        [
        [InlineKeyboardButton(text=f"Invoice {text}", callback_data=f"{text}")] 
        ]
    )

def deposit_address_markup(user, invoice):
    lang = user.language
    invoice_id = invoice['id']
    invoice_link = invoice['checkoutLink']
    invoice_amount = invoice['amount']
    invoice_currency = invoice['currency']
    # qr_code = invoice['receipt']['showQR']
    translations = {
        "en": {
            "deposit_address_text": f"""
Invoice Created: {invoice_id}

You're depositing {invoice_amount} {invoice_currency}
Please proceed with the payment by clicking Pay now

Make sure to complete the payment of {invoice_amount} {invoice_currency} within the provided expiration time.
                """,
            "back_to_menu": "<<",
            "pay": "üí∞Pay now"
        },
        "ru": {
            "deposit_address_text": f"""
–°—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω: {invoice_id}

–í—ã –≤–Ω–æ—Å–∏—Ç–µ {invoice_amount} {invoice_currency}
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –æ–ø–ª–∞—Ç—É, –Ω–∞–∂–∞–≤ ¬´–û–ø–ª–∞—Ç–∏—Ç—å —Å–µ–π—á–∞—Å¬ª

–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–ª–∞—Ç–µ–∂ {invoice_amount} {invoice_currency} –≤ —Ç–µ—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è.
                """,
            "back_to_menu": "<<",
            "pay": "üí∞–û–ø–ª–∞—Ç–∏—Ç—å —Å–µ–π—á–∞—Å"
        }
    }
    translation = translations[lang] if lang in translations else translations["en"]
    deposite_text = translation['deposit_address_text']
    keyboard = [[
        InlineKeyboardButton(translation['pay'], url=invoice_link),
        InlineKeyboardButton("Cancel", callback_data="cancel"),
    ]]
    return deposite_text, InlineKeyboardMarkup(keyboard)


def deposit_markup(user):
    lang = user.language
    translations = {
        "en": {
            "balance_text": f"Wallet Balance is {user.account_balance}",
            "deposit_text": f"""<b>Enter the amount you wish to deposit (min: 10 {config.FIAT_CURRENCY} max: 5,000,000 {config.FIAT_CURRENCY})</b>""",
            "back_to_menu": "<<",
            "inputholder": "Enter value"
        },
        "ru": {
            "balance_text": f"Wallet Balance is {user.account_balance}",
            "deposit_text": f"""–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ (–º–∏–Ω.: 10 {config.FIAT_CURRENCY} max: 5,000,000 {config.FIAT_CURRENCY} )""",
            "back_to_menu": "<<",
            "inputholder": "Enter value"
        }
    }
    translation = translations[lang] if lang in translations else translations["en"]
    force_reply = types.ForceReply(
        input_field_placeholder=translation['inputholder'])
    deposite_text = translation['deposit_text']
    return deposite_text, force_reply


def purchase_markup(user, purchases):
    lang = user.language
    translations = {
        "en": {
            "vendor_user": "Vendor" if user.is_vendor else "User",
            "activity": "Your Purchase Activity",
            "active": "‚ôªÔ∏è",
            "inactive": "‚úîÔ∏è",
            "back_to_menu": "<<"
        },
        "ru": {
            "vendor_user": "–ü—Ä–æ–¥–∞–≤–µ—Ü" if user.is_vendor else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "activity": "–í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫",
            "active": "‚ôªÔ∏è",
            "inactive": "‚úîÔ∏è",
            "back_to_menu": "<<"
        }
    }

    translation = translations[lang] if lang in translations else translations["en"]

    media = InputMediaPhoto(
        config.MENU_PHOTO, caption=f"{translation['vendor_user']}: {translation['activity']}")

    keys = []

    for purchase in purchases:
        status = translation['active'] if purchase.active else translation['inactive']
        button_text = f"{purchase.get_created_at()}: {purchase.product_name} {status}"
        keys.append([InlineKeyboardButton(
            button_text, callback_data=f"purchase:{purchase.id}")])

    keys.append([InlineKeyboardButton(
        translation['back_to_menu'], callback_data="back_to_menu")])

    keyboard = InlineKeyboardMarkup(keys)
    return media, keyboard


def payment_method(product, user):
    lang = user.language
    translations = {
        "en": {
            "cancel": "Cancel",
            "pay_from_balance": "Pay from Balance",
            "pay_with_crypto": "Pay with Crypto"
        },
        "ru": {
            "cancel": "–û—Ç–º–µ–Ω–∞",
            "pay_from_balance": "–û–ø–ª–∞—Ç–∏—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞",
            "pay_with_crypto": "–û–ø–ª–∞—Ç–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"
        },
        "ge": {
            "cancel": "·Éí·Éê·É£·É•·Éõ·Éî·Éë·Éê",
            "pay_from_balance": "·Éí·Éê·Éì·Éê·ÉÆ·Éì·Éê ·Éë·Éê·Éö·Éê·Éú·É°·Éò·Éì·Éê·Éú",
            "pay_with_crypto": "·Éí·Éê·Éì·Éê·ÉÆ·Éì·Éê ·Éô·É†·Éò·Éû·É¢·Éù·Éï·Éê·Éö·É£·É¢·Éò·Éó"
        }
    }
    translation = translations.get(lang, translations["en"])
    pay_from_wallet = InlineKeyboardButton(translation['pay_from_balance'], callback_data=f"buy_product:pay_from_balance:{product.id}")
    pay_direct = InlineKeyboardButton(translation['pay_with_crypto'], callback_data=f"buy_product:pay_with_crypto:{product.id}")
    cancel = InlineKeyboardButton(translation['cancel'], callback_data="cancel")
    keyboard = [[pay_from_wallet, pay_direct], [cancel]]
    return InlineKeyboardMarkup(keyboard)


def view_product_markup(product, user):
    lang = user.language
    user_id = user.user_id
    translations = {
        "en": {
            "mine": "My",
            "view": "View",
            "product_name": "Product Name:",
            "price": "Price:",
            "description": "Description:",
            "delete": "Delete",
            "buy": "Buy",
            "cancel": "Cancel",
        },
        "ru": {
            "mine": "–ú–æ—ë" if user_id == product.vendor_id else "–ü—Ä–æ—Å–º–æ—Ç—Ä",
            "view": "–ü—Ä–æ—Å–º–æ—Ç—Ä",
            "product_name": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:",
            "price": "–¶–µ–Ω–∞:",
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ:",
            "delete": "–£–¥–∞–ª–∏—Ç—å",
            "buy": "–ö—É–ø–∏—Ç—å",
            "cancel": "–û—Ç–º–µ–Ω–∞"
        }
    }

    translation = translations[lang] if lang in translations else translations["en"]

    message_text = f"""
{translation['mine']} Product:

<b>{translation['product_name']}</b> {product.name}

üí∞ <b>{translation['price']}</b> {product.price} {config.FIAT_CURRENCY}

üìù <b>{translation['description']}</b>
{product.description}
    """
    is_mine = user_id == product.vendor_id
    key = []
    if is_mine:
        key.append(InlineKeyboardButton(translation['delete'], callback_data=f"delete_product:{product.id}"))
    else:
        key.append(InlineKeyboardButton(translation['buy'], callback_data=f"confirm_payment:{product.id}"))
    key.append(InlineKeyboardButton(translation['cancel'], callback_data="cancel"))
    return message_text, InlineKeyboardMarkup([key])


def order_placed_markup(product, purchase, user):
    lang = user.language
    translations = {
        "en": {
            "order_placed": "You have successfully paid {product.price}{config.FIAT_CURRENCY} from your account balance for the product {product.name}.",
            "order_id": "Order ID:",
            "purchase_status": "Purchase Status:",
            "product_name": "Product Name:",
            "price": "Price:",
            "description": "Description:",
            "continue_shopping": "Continue Shopping"
        },
        "ru": {
            "order_placed": "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É",
            "order_id": "ID –∑–∞–∫–∞–∑–∞:",
            "purchase_status": "–°—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–∫–∏:",
            "product_name": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:",
            "price": "–¶–µ–Ω–∞:",
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ:",
            "continue_shopping": "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏"
        }
    }

    translation = translations[lang] if lang in translations else translations["en"]

    message_text = f"""
{translation['order_placed'].format(product=product, config=config)}

üì¶ <b>{translation['order_id']}</b> {purchase.id}

üìù <b>{translation['purchase_status']}</b> {purchase.status}

<b>{translation['product_name']}</b> {product.name}

üí∞ <b>{translation['price']}</b> {product.price} {config.FIAT_CURRENCY}

üìù <b>{translation['description']}</b>
{product.description}
    """

    continue_button = InlineKeyboardButton(
        translation['continue_shopping'], callback_data="continue_shopping")
    keyboard = [[continue_button]]
    return message_text, InlineKeyboardMarkup(keyboard)


def all_products_markup(products, user):
    lang = user.language

    translations = {
        "en": {
            "balance": f"üè¶ Wallet Balance: {user.account_balance} {config.FIAT_CURRENCY}",
            "back_to_menu": "<<"
        },
        "ru": {
            "balance": f"üè¶ Wallet –ë–∞–ª–∞–Ω—Å: {user.account_balance} {config.FIAT_CURRENCY}",
            "back_to_menu": "<<"
        }
    }

    translation = translations[lang] if lang in translations else translations["en"]

    all_products_markup = []
    media = InputMediaPhoto(config.MENU_PHOTO, caption=translation['balance'])
    for product in products:
        all_products_markup.append([
            InlineKeyboardButton(
                product.name, callback_data=f"view_product:{product.id}")
        ])
    all_products_markup.append([
        InlineKeyboardButton(
            translation['back_to_menu'], callback_data="back_to_menu")
    ])
    return media, InlineKeyboardMarkup(all_products_markup)


def get_create_product_keyboard(user, fields=None):
    lang = user.language
    translations = {
        "en": {
            "name": "Name",
            "description": "Description",
            "price": "Price",
            "back_to_menu": "<<",
            "enter_name": "Enter name",
            "enter_description": "Enter description",
            "enter_price": "Enter price"
        },
        "ru": {
            "name": "–ù–∞–∑–≤–∞–Ω–∏–µ",
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
            "price": "–¶–µ–Ω–∞",
            "back_to_menu": "<<",
            "enter_name": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
            "enter_description": "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
            "enter_price": "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É"
        }
    }

    translation = translations[lang] if lang in translations else translations["en"]

    name = fields.get(
        'name', translation['enter_name']) if fields else translation['enter_name']
    description = fields.get(
        'description', translation['enter_description']) if fields else translation['enter_description']
    price = fields.get(
        'price', translation['enter_price']) if fields else translation['enter_price']

    create_product_keyboard = [
        [InlineKeyboardButton(
            f"{translation['name']}: {name}", callback_data="create_product:name")],
        [InlineKeyboardButton(
            f"{translation['description']}: {description}", callback_data="create_product:description")],
        [InlineKeyboardButton(
            f"{translation['price']}: {price} {config.FIAT_CURRENCY}", callback_data="create_product:price")],
        [InlineKeyboardButton(translation['back_to_menu'],
                              callback_data="back_to_menu")]
    ]

    return InlineKeyboardMarkup(create_product_keyboard)


def product_menu_markup(user):
    translations = {
        "en": {
            "balance": "Wallet Balance üíµ ",
            "all_products": "All Products üß∂",
            "vendor_products": "Vendor Products üìô",
            "create_product": "Create New Product üîé",
            "back_to_menu": "<<"
        },
        "ru": {
            "balance": "Wallet –ë–∞–ª–∞–Ω—Å üíµ ",
            "all_products": "–í—Å–µ —Ç–æ–≤–∞—Ä—ã üß∂",
            "vendor_products": "–¢–æ–≤–∞—Ä—ã –ø—Ä–æ–¥–∞–≤—Ü–∞ üìô",
            "create_product": "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä üîé",
            "back_to_menu": "<<"
        }
    }

    lang = user.language if user.language in translations else "en"
    translation = translations[lang]

    is_vendor = user.is_vendor
    media = InputMediaPhoto(
        config.MENU_PHOTO, caption=f"{translation['balance']}: {user.account_balance} {config.FIAT_CURRENCY}")

    if is_vendor:
        keys = [
            [InlineKeyboardButton(
                translation["all_products"], callback_data="all_products")],
            [InlineKeyboardButton(
                translation["vendor_products"], callback_data="vendor_products")],
            [InlineKeyboardButton(
                translation["create_product"], callback_data="create_product")],
            [InlineKeyboardButton(
                translation["back_to_menu"], callback_data="back_to_menu")]
        ]
    else:
        keys = [
            [InlineKeyboardButton(
                translation["all_products"], callback_data="all_products")],
            [InlineKeyboardButton(
                translation["back_to_menu"], callback_data="back_to_menu")]
        ]

    keyboard = InlineKeyboardMarkup(keys)
    return media, keyboard


def menu_markup(user):
    translations = {
        "en": {
            "balance": "Wallet Balance üíµ ",
            "products": "Products üß∂",
            "website": "Website ü™ê",
            "group": "Group üë•",
            "admin": "Admin üë©‚ÄçüöÄ",
            "purchase": "Purchase ü™∫",
            "deposit": "Deposit"

        },
        "ru": {
            "balance": "Wallet –ë–∞–ª–∞–Ω—Å üíµ ",
            "products": "–ü—Ä–æ–¥—É–∫—Ç—ã üß∂",
            "website": "–°–∞–π—Ç ü™ê",
            "group": "–ì—Ä—É–ø–ø–∞ üë•",
            "admin": "–ê–¥–º–∏–Ω üë©‚ÄçüöÄ",
            "purchase": "–ü–æ–∫—É–ø–∫–∞ ü™∫",
            "deposit": "Deposit"
        }
    }

    # Default to English if language not available
    lang = user.language if user.language in translations else "en"
    translation = translations[lang]

    media = InputMediaPhoto(
        config.MENU_PHOTO, caption=f"{translation['balance']}: {user.account_balance} {config.FIAT_CURRENCY}")
    list_menu_keys = [
        [InlineKeyboardButton(translation["products"],
                              callback_data="products")],
        # [InlineKeyboardButton(translation["website"], url=config.WEBSITE_URL)],
        # [InlineKeyboardButton(translation["group"], url=config.GROUP_URL)],
        [InlineKeyboardButton(translation["admin"], url=config.ADMIN_USER)],
        [InlineKeyboardButton(translation["purchase"],
                              callback_data="purchase")],
        [InlineKeyboardButton(translation["deposit"],
                              callback_data="create_deposit")]
    ]
    keyboard = InlineKeyboardMarkup(list_menu_keys)
    return media, keyboard


def view_purchase_markup(purchase, user):
    lang = user.language

    translations = {
        "en": {
            "view_orders": "View Orders",
            "my_orders": "My Orders",
            "user_name": "User Name:",
            "user_id": "User ID:",
            "vendor_id": "Vendor ID:",
            "vendor_username": "Vendor Username:",
            "user_address": "User Address:",
            "product_name": "Product Name:",
            "price": "Price:",
            "description": "Description:",
            "completed": "Completed",
            "cancel": "Cancel"
        },
        "ru": {
            "view_orders": "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤",
            "my_orders": "–ú–æ–∏ –∑–∞–∫–∞–∑—ã",
            "user_name": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            "user_id": "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            "vendor_id": "ID –ø—Ä–æ–¥–∞–≤—Ü–∞:",
            "vendor_username": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞:",
            "user_address": "–ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            "product_name": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:",
            "price": "–¶–µ–Ω–∞:",
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ:",
            "completed": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
            "cancel": "–û—Ç–º–µ–Ω–∞"
        }
    }

    translation = translations[lang] if lang in translations else translations["en"]

    is_vendor = user.is_vendor
    message_text = f"""
        {translation['view_orders'] if is_vendor else translation['my_orders']}
        
        üì¶ <b>{translation['order_id']}</b> {purchase.id}
        
        <b>{translation['user_name']}</b> {purchase.buyer_username}
        <b>{translation['user_id']}</b> {purchase.buyer_id}
        
        <b>{translation['vendor_id']}</b> {purchase.vendor_id}
        <b>{translation['vendor_username']}</b> @{purchase.vendor_username}
        
        <b>{translation['user_address']}</b> {purchase.address}
        
        <b>{translation['product_name']}</b> {purchase.product_name}
        
        üí∞ <b>{translation['price']}</b> {purchase.price} {config.FIAT_CURRENCY}
        
        üìù <b>{translation['description']}</b>
        {purchase.description}
    """

    if is_vendor:
        button_text = translation['completed']
        button_callback = f"complete_purchase:{purchase.id}"
        keyboard = [
            [InlineKeyboardButton(button_text, callback_data=button_callback)],
            [InlineKeyboardButton(translation['cancel'],
                                  callback_data="cancel")]
        ]
    else:
        button_text = translation['cancel']
        button_callback = "cancel"
        keyboard = [[InlineKeyboardButton(
            button_text, callback_data=button_callback)]]

    return message_text, InlineKeyboardMarkup(keyboard)


def get_create_product_keyboard(user, fields=None):
    lang = user.language
    translations = {
        "en": {
            "name": "Name:",
            "description": "Description:",
            "price": "Price:",
            "back_to_menu": "<<"
        },
        "ru": {
            "name": "–ù–∞–∑–≤–∞–Ω–∏–µ:",
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ:",
            "price": "–¶–µ–Ω–∞:",
            "back_to_menu": "<<"
        }
    }

    translation = translations[lang] if lang in translations else translations["en"]

    name = fields.get(
        'name', translation['name']) if fields else translation['name']
    description = fields.get(
        'description', translation['description']) if fields else translation['description']
    price = fields.get(
        'price', translation['price']) if fields else translation['price']
    create_product_keyboard = [
        [InlineKeyboardButton(
            f"{translation['name']} {name}", callback_data="create_product:name")],
        [InlineKeyboardButton(
            f"{translation['description']} {description}", callback_data="create_product:description")],
        [InlineKeyboardButton(
            f"{translation['price']} {price} {config.FIAT_CURRENCY}", callback_data="create_product:price")],
        [InlineKeyboardButton(translation['back_to_menu'],
                              callback_data="back_to_menu")]
    ]
    return InlineKeyboardMarkup(create_product_keyboard)


def passive_menu(lang):
    passive_markup = {
        "en": [
            ["ìÄâ Menu"],
        ],
        "ru": [
            ["ìÄâ –ú–µ–Ω—é"],
        ]
    }
    passive_keys = types.ReplyKeyboardMarkup(
        resize_keyboard=True, input_field_placeholder="View Menu")
    passive_keys.keyboard = passive_markup.get(lang, passive_markup["en"])
    return passive_keys


def lang_keys():
    select_lang_markup = [
        ["English  üá¨üáß", "–†—É—Å—Å–∫–∏–π üá∑üá∫"]
    ]
    lang_keys = types.ReplyKeyboardMarkup(
        resize_keyboard=True,
        one_time_keyboard=True
    )
    lang_keys.keyboard = select_lang_markup
    return lang_keys
